@page "/filterpage"
@using BatchTaskDashboard.Model
@using BatchTest.Model
@using Newtonsoft.Json
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@using Radzen
@using Radzen.Blazor
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

    <div class="row  mx-0">
        <div class="col-md-3 mx-0">

            <div style=" height: 80vh;">
                <RadzenStack>
                    <select @ref="selectElement" @onchange="OnSelectChanged" multiple style="width: 100%;">
                        @foreach (var item in items)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                    @*<RadzenListBox TValue="string" Data="@selectedItems"  Style="width:100%; height: 20vh; overflow-y: auto; margin-bottom:10px;"/>*@
                    <RadzenButton Text="一括削除" ButtonStyle="ButtonStyle.Danger" Click="@RemoveAllSelectedItems" Style="margin-bottom: 10px;" />
                    <RadzenListBox TValue="string" Data="@selectedItems"  Style="width:100%; height: 20vh; overflow-y: auto; margin-bottom:10px;line-height:0.1;">
                        <Template>
                            @{
                                var item = context as string;
                            }
                            <div class="d-flex align-items-center">
                                @*<RadzenButton Text="―" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Danger" Click="@( () => RemoveSelectedItem(item) )" Style="padding: 0 4px; font-size: 3px; line-height:0.1;height: 8px;" />*@
            <div class="custom-button" @onclick="@( () => RemoveSelectedItem(item) )" style="padding: 0 4px; font-size: 10px; line-height:0.1;height: 15px; background-color: red; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center;">－</div>
                                <div class="flex-grow-1" style="margin-left: 10px;">@item</div>
                            </div>
                        </Template>
                    </RadzenListBox>
                </RadzenStack>
            </div>
        </div>
        <div class="col-md-9" style="overflow: hidden;">
            <div style="height: 40vh; overflow-y: scroll;">
                <h5>ItemnameList</h5>
                <RadzenButton Text="Add All Items" Click="@AddAllItems" />
                @*<RadzenDataGrid @ref="ItemnameDataGrid" class="radzen-datagrid-compact"AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@itemnameItems" TItem="FilterParam" AutoGenerateColumns="false" FilteredDataChanged="@((IEnumerable<FilterParam> filteredData) => OnFilteredDataChanged(filteredData))" Style="height: 30vh; overflow-y: auto;">*@
                    <RadzenDataGrid @ref="ItemnameDataGrid" class="radzen-datagrid-compact" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@GetFilteredItemnameItems()" TItem="FilterParam" AutoGenerateColumns="false" FilteredDataChanged="@((IEnumerable<FilterParam> filteredData) => OnFilteredDataChanged(filteredData))" Style="height: 30vh; overflow-y: auto;">
                    <Columns>
                        <RadzenDataGridColumn TItem="FilterParam" Context="item" Width="100px" Filterable="false">
                            <Template Context="item">
                                <RadzenButton Text="Select" Size="ButtonSize.Small" Click="@( () => OnItemnameListChanged(item) )" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FilterParam" Property="Filter1" Title="Filter1" />
                        <RadzenDataGridColumn TItem="FilterParam" Property="Filter2" Title="Filter2" />
                        <RadzenDataGridColumn TItem="FilterParam" Property="Itemname" Title="Itemname" />
                    </Columns>
                </RadzenDataGrid>
            </div>
            <div style="height: 40vh; overflow-y: scroll;">
                <h5>SelectedItemnameList</h5>
                <RadzenButton Text="Remove All Items" ButtonStyle="ButtonStyle.Danger" Click="@RemoveAllSelectedItems" />
                <RadzenDataGrid @ref="SelectedItemnameDataGrid" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@selectedItemnameItems" TItem="FilterParam"  Style="height: 30vh; overflow-y: auto;">
                    <Columns>
                        <RadzenDataGridColumn TItem="FilterParam" Context="item" Width="100px" Filterable="false">
                            <Template Context="item">
                                <RadzenButton Text="Remove" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="@( () => RemoveSelectedItem(item) )" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="FilterParam" Property="Filter1" Title="Filter1" />
                        <RadzenDataGridColumn TItem="FilterParam" Property="Filter2" Title="Filter2" />
                        <RadzenDataGridColumn TItem="FilterParam" Property="Itemname" Title="Itemname" />
                    </Columns>
                </RadzenDataGrid>
            </div>

        </div>
    </div>





@code {


    //行間詰めたリストボックス用
    private IEnumerable<FilterParam> itemnameItems;
    private ElementReference selectElement;
    private Dictionary<string, string> items = new Dictionary<string, string>();

    private List<string> selectedItems = new List<string>();

    private async Task OnSelectChanged(ChangeEventArgs e)
    {
        var selectedOptions = await JSRuntime.InvokeAsync<List<string>>("getSelectedOptions", selectElement);

        foreach (var key in selectedOptions)
        {
            var itemToAdd = items[key];
            if (!selectedItems.Contains(itemToAdd))
            {
                selectedItems.Add(itemToAdd);
            }
        }

        FilterItemnameList(); // この行を追加
        StateHasChanged();
    }
    private void RemoveSelectedItem(string item)
    {
        if (item != null)
        {
            selectedItems.Remove(item);
            FilterItemnameList(); // この行を追加
            StateHasChanged();
        }
    }
    private void RemoveAllSelectedItems()
    {
        selectedItems.Clear();
        FilterItemnameList();
        StateHasChanged(); // これを追加
    }


    //リストボックスに追加された内容でItemnameListをフィルタリング
    private void FilterItemnameList()
    {
        itemnameItems = GetFilteredItemnameItems(); // この行を変更
        ItemnameDataGrid.Reload(); // ItemnameDataGrid をリロード
        StateHasChanged();
    }
    private IEnumerable<FilterParam> GetFilteredItemnameItems()
    {
        if (selectedItems.Count == 0) // selectedItems が空の場合
        {
            return filterParams
                .GroupBy(x => x.Filter1)
                .Select(g => g.First());
        }
        else
        {
            return filterParams
                .Where(x => selectedItems.Contains(x.Filter1)) // selectedItems を使ってフィルタリング
                .GroupBy(x => x.Filter1)
                .Select(g => g.First());
        }
    }



    private DateTime? fromDate;
    private DateTime? toDate;

    private RadzenListBox<FilterParam> Filter1List;
    private RadzenListBox<FilterParam> Filter2List;
    //private RadzenListBox<FilterParam> ItemnameList;
    //private RadzenListBox<FilterParam> SelectedItemnameList;
    private RadzenDataGrid<FilterParam> ItemnameDataGrid;
    private RadzenDataGrid<FilterParam> SelectedItemnameDataGrid;


    private RadzenListBox<FilterParam> ItemnameDistinctList;
    private IEnumerable<FilterParam> itemnameDistinctItems;

    private List<FilterParam> filterParams = new List<FilterParam>
    {
        new FilterParam { Filter1 = "Filter1-A1", Filter2 = "Filter2-A", Itemname = "Itemname-1" },
        new FilterParam { Filter1 = "Filter1-A2", Filter2 = "Filter2-B", Itemname = "Itemname-2" },
        new FilterParam { Filter1 = "Filter1-A3", Filter2 = "Filter2-C", Itemname = "Itemname-3" },
        new FilterParam { Filter1 = "Filter1-B", Filter2 = "Filter2-A", Itemname = "Itemname-4" },
        new FilterParam { Filter1 = "Filter1-B", Filter2 = "Filter2-B", Itemname = "Itemname-5" },
        new FilterParam { Filter1 = "Filter1-B", Filter2 = "Filter2-C", Itemname = "Itemname-6" },
        new FilterParam { Filter1 = "Filter1-C", Filter2 = "Filter2-A", Itemname = "Itemname-7" },
        new FilterParam { Filter1 = "Filter1-C", Filter2 = "Filter2-B", Itemname = "Itemname-8" },
        new FilterParam { Filter1 = "Filter1-C", Filter2 = "Filter2-C", Itemname = "Itemname-9" }
    };

        private void OnFilterChanged()
    {
        // Filter has changed, you can perform any action needed here.
    }
    private IEnumerable<FilterParam> filter1Items;
    private IEnumerable<FilterParam> filter2Items;

    private List<FilterParam> selectedItemnameItems = new List<FilterParam>();
     private List<FilterParam> filteredItemnameItems = new List<FilterParam>();

    //private ObservableCollection<FilterParam> selectedItemnameItems = new ObservableCollection<FilterParam>();



    private void OnDateRangeChanged(DateTime? date)
    {
        // FilterParam リストを日時範囲でフィルタリングする処理を実装
        // Filter1List, Filter2List, ItemnameList のデータを更新
    }


    protected override void OnInitialized()
    {
            // Add items
        int index = 1;
        foreach (var filterParam in filterParams.GroupBy(x => x.Filter1).Select(g => g.First()))
        {
            items.Add(index.ToString(), filterParam.Filter1);
            index++;
        }
        filter1Items = filterParams.GroupBy(x => x.Filter1).Select(g => g.First());
        filter2Items = filterParams.GroupBy(x => x.Filter2).Select(g => g.First());
        itemnameItems = filterParams.GroupBy(x => x.Itemname).Select(g => g.First());
        itemnameDistinctItems = filterParams.GroupBy(x => x.Itemname).Select(g => g.First());

    }

    private void OnFilter1ListChanged(object value)
    {
        if (value != null)
        {
            string selectedFilter1 = value.ToString();
            itemnameItems = filterParams.Where(x => x.Filter1 == selectedFilter1).GroupBy(x => x.Itemname).Select(g => g.First());
            StateHasChanged();
        }
    }

    private void OnFilter2ListChanged(object value)
    {
        if (value != null)
        {
            string selectedFilter2 = value.ToString();
            itemnameItems = filterParams.Where(x => x.Filter2 == selectedFilter2).GroupBy(x => x.Itemname).Select(g => g.First());
            StateHasChanged();
        }
    }

    private void OnItemnameDistinctListChanged(object value)
    {
        if (value != null)
        {
            string selectedItemname = value.ToString();
            itemnameItems = filterParams.Where(x => x.Itemname == selectedItemname).GroupBy(x => x.Itemname).Select(g => g.First());
            StateHasChanged();
        }
    }
    private void UpdateItemnameItems()
    {
        itemnameItems = filterParams.GroupBy(x => x.Itemname).Select(g => g.First());
        StateHasChanged();
    }

    private void OnItemnameListChanged(FilterParam selectedItem)
    {
        if (selectedItem != null)
        {
            selectedItemnameItems.Add(selectedItem);
            SelectedItemnameDataGrid.Reload();
        }
    }

        private void OnFilteredDataChanged(IEnumerable<FilterParam> filteredData)
    {
        filteredItemnameItems = filteredData.ToList();
    }

    private void AddAllItems()
    {
        var visibleItems = ItemnameDataGrid.View.Cast<FilterParam>().ToList();

        foreach (var item in visibleItems)
        {
            if (!selectedItemnameItems.Any(x => x.Itemname == item.Itemname))
            {
                selectedItemnameItems.Add(item);
            }
        }
        SelectedItemnameDataGrid.Reload();
        StateHasChanged();
    }
    private void RemoveSelectedItem(FilterParam selectedItem)
    {
        if (selectedItem != null)
        {
            selectedItemnameItems.Remove(selectedItem);
            SelectedItemnameDataGrid.Reload();
        }
    }

    
}
